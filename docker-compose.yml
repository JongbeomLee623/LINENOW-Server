services:
  db:
    image: mysql:8.0
    container_name: linenow-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_USER_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_USER_PASSWORD}
    volumes:
      - ./mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network

  redis:
    image: redis:6.0
    container_name: linenow-redis
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/data:/data  # 데이터 저장 경로 마운트
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "6379:6379"
    networks:
      - app-network

  celery:
    build: .
    container_name: linenow-celery
    command: celery -A linenow worker --loglevel=info
    depends_on:
      - redis
      - db
    networks:
      - app-network
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    restart: on-failure
    user: "1000:1000"  # 비루트 사용자로 실행

  web:
    build: .
    container_name: linenow-was
    command: gunicorn linenow.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./staticfiles:/app/staticfiles   # 정적 파일 공유
    depends_on:
      - db
    networks:
      - app-network
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}

  nginx:
    image: nginx:latest
    container_name: linenow-ws
    ports:
      - "80:80"
      - "443:443"  # HTTPS 포트 추가
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/app/staticfiles   # Nginx에서 정적 파일 접근 가능
      - /etc/letsencrypt/live/linenow.xyz:/etc/letsencrypt/live/linenow.xyz:ro  # SSL 인증서 공유 (읽기 전용)
      - /etc/letsencrypt/archive/linenow.xyz:/etc/letsencrypt/archive/linenow.xyz:ro  # SSL 인증서 저장소 공유
    depends_on:
      - web
    networks:
      - app-network

networks:
  app-network:
    driver: bridge